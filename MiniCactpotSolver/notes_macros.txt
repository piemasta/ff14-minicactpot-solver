#region Point array definitions for curved border corners
            ////Point origin = e.Bounds.Location;
            ////int oppositeX = origin.X + e.Bounds.Width;

            ////Point[] topPoints = new Point[] { new Point(origin.X + 0, origin.Y + 20), //Start

            ////                                  new Point(origin.X + 0, origin.Y + 5),
            ////                                  new Point(origin.X + 1, origin.Y + 3),
            ////                                  new Point(origin.X + 2, origin.Y + 2),   //Top left curve 
            ////                                  new Point(origin.X + 3, origin.Y + 1),
            ////                                  new Point(origin.X + 5, origin.Y + 0),

            ////                                  new Point(oppositeX - 5, origin.Y + 0),
            ////                                  new Point(oppositeX - 3, origin.Y + 1),
            ////                                  new Point(oppositeX - 2, origin.Y + 2),  //Top right curve
            ////                                  new Point(oppositeX - 1, origin.Y + 3),
            ////                                  new Point(oppositeX - 0, origin.Y + 5),

            ////                                  new Point(oppositeX - 0, origin.Y + 20)  //End
            ////                               };

            ////oppositeX = origin.X;
            ////origin.Offset(e.Bounds.Width, e.Bounds.Height);

            ////Point[] bottomPoints = new Point[] { new Point(origin.X - 0, origin.Y - 20), //Start

            ////                                     new Point(origin.X - 0, origin.Y - 5),
            ////                                     new Point(origin.X - 1, origin.Y - 3),
            ////                                     new Point(origin.X - 2, origin.Y - 2),   //Top left curve 
            ////                                     new Point(origin.X - 3, origin.Y - 1),
            ////                                     new Point(origin.X - 5, origin.Y - 0),

            ////                                     new Point(oppositeX + 5, origin.Y - 0),
            ////                                     new Point(oppositeX + 3, origin.Y - 1),
            ////                                     new Point(oppositeX + 2, origin.Y - 2),  //Top right curve
            ////                                     new Point(oppositeX + 1, origin.Y - 3),
            ////                                     new Point(oppositeX + 0, origin.Y - 5),

            ////                                     new Point(oppositeX + 0, origin.Y - 20)  //End
            ////                               };
            #endregion




			LinearGradientBrush top, bottom, left, right;
            Rectangle gradTop, gradBottom, gradLeft, gradRight;
            int length = 10;
            int clip = 16;

            gradTop = new Rectangle(clip, 0, this.DisplayRectangle.Width - (clip * 2), length);
            gradBottom = new Rectangle(clip, this.DisplayRectangle.Height - length, this.DisplayRectangle.Width - (clip * 2), length);
            gradLeft = new Rectangle(0, clip, length, this.DisplayRectangle.Height - (clip * 2));
            gradRight = new Rectangle(this.DisplayRectangle.Width - length, clip, length, this.DisplayRectangle.Height - (clip * 2));  

            Color black = Color.FromArgb(255, 0, 0, 0);
            Color blue = Color.FromArgb(255, 0, 0, 255);
            Color trans = Color.FromArgb(0, 255, 0, 0);

            top     = new LinearGradientBrush(gradTop, trans, black, LinearGradientMode.Vertical);
            bottom  = new LinearGradientBrush(gradBottom, black, trans, LinearGradientMode.Vertical);
            left    = new LinearGradientBrush(gradLeft, trans, black, LinearGradientMode.Horizontal);
            right   = new LinearGradientBrush(gradRight, black, trans, LinearGradientMode.Horizontal);

            e.Graphics.FillRectangle(top, gradTop);
            e.Graphics.FillRectangle(bottom, gradBottom);
            e.Graphics.FillRectangle(left, gradLeft);
            e.Graphics.FillRectangle(right, gradRight);